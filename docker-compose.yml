services:
  auth_service:
    container_name: AuthService
    build:
      context: .
      dockerfile: authorization_service/dockerfile
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - GRPC_PORT=${GRPC_PORT}
      - GRPC_TIMEOUT=${GRPC_TIMEOUT}
    depends_on:
      db:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    networks:
      - grpc_network
      - db_network
        
  
  db:
    container_name: postgres_db
    image: postgres:17
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:  # Ждем, пока БД будет готова
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 5s
      retries: 5
    networks:
      - db_network

  migrator:
    container_name: migrator
    build:
      context: ./db
      dockerfile: dockerfile
    environment:
      - DB_USER=${DB_HOST}
      - DB_PASSWORD=${DB_PORT}
      - DB_NAME=${DB_USER}
      - DB_PORT=${DB_PASSWORD}
      - DB_HOST=${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db_network
    

volumes:
  db_data:

# Before start create a network with command
# docker network create grpc_network
networks:
  grpc_network:
    external: true
  db_network:
    driver: bridge