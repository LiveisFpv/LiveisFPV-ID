services:
  auth_service:
    container_name: AuthService
    build:
      context: .
      dockerfile: authorization_service/dockerfile
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
      
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - GRPC_PORT=${GRPC_PORT}
      - GRPC_TIMEOUT=${GRPC_TIMEOUT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - YANDEX_CLIENT_ID=${YANDEX_CLIENT_ID}
      - YANDEX_CLIENT_SECRET=${YANDEX_CLIENT_SECRET}
      - VK_CLIENT_ID=${VK_CLIENT_ID}
      - VK_CLIENT_SECRET=${VK_CLIENT_SECRET}
    depends_on:
      postgers:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
      redis:
    networks:
      - grpc_network
      - storage_network
        
  
  postgres:
    container_name: postgres_db
    image: postgres:17
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:  # Ждем, пока БД будет готова
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 5s
      retries: 5
    networks:
      - storage_network
  
  redis:
    image: redis:8-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - storage_network


  migrator:
    container_name: migrator
    build:
      context: ./db
      dockerfile: dockerfile
    environment:
      - DB_USER=${DB_HOST}
      - DB_PASSWORD=${DB_PORT}
      - DB_NAME=${DB_USER}
      - DB_PORT=${DB_PASSWORD}
      - DB_HOST=${DB_NAME}
    depends_on:
      postgers:
        condition: service_healthy
    networks:
      - storage_network
    

volumes:
  postgres_data:
  redis_data:

# Before start create a network with command
# docker network create grpc_network
networks:
  grpc_network:
    external: true
  storage_network:
    driver: bridge