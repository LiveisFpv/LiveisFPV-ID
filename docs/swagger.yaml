basePath: /api
definitions:
  presenters.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  presenters.TokenResReq:
    properties:
      access_token:
        type: string
    type: object
  presenters.UserLoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  presenters.UserRegisterRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  presenters.UserResponse:
    properties:
      email:
        type: string
      email_confirmed:
        type: boolean
      first_name:
        type: string
      last_name:
        type: string
      locale_type:
        type: string
      photo:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  presenters.UserUpdateRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      locale_type:
        example: ru-RU
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: SSO для регистрации и авторизации сервисов
  title: SSO API
  version: "0.1"
paths:
  /auth/authenticate:
    get:
      consumes:
      - application/json
      description: Authenticates the user using the provided access token
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Authenticate user
      tags:
      - Auth
  /auth/confirm-email:
    get:
      consumes:
      - application/json
      description: Confirms the user's email address by email-confirmation token.
      parameters:
      - description: Email confirmation token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Confirm email
      tags:
      - User
  /auth/create:
    post:
      consumes:
      - application/json
      description: Creates a new user and sends an email confirmation link.
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenters.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenters.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Create user
      tags:
      - User
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in the user and returns access and refresh tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenters.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.TokenResReq'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logs out the user by invalidating the refresh token and clearing
        the cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.TokenResReq'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Logout user
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refreshes the access and refresh tokens using the refresh token
        from the cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.TokenResReq'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Auth
  /auth/update:
    put:
      consumes:
      - application/json
      description: Updates user profile fields. Requires Bearer access token in Authorization
        header.
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/presenters.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Update user
      tags:
      - User
  /auth/validate:
    get:
      consumes:
      - application/json
      description: Validates the provided access token
      parameters:
      - description: Bearer access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Validate access token
      tags:
      - Auth
  /oauth/google:
    get:
      consumes:
      - application/json
      description: Initiates Google OAuth login. Redirects to Google authorization
        page.
      produces:
      - application/json
      responses:
        "307":
          description: Temporary Redirect
      summary: Google OAuth login
      tags:
      - OAuth
  /oauth/google/callback:
    get:
      consumes:
      - application/json
      description: Handles Google OAuth callback, issues auth tokens and sets refresh
        token cookie.
      parameters:
      - description: OAuth state
        in: query
        name: state
        type: string
      - description: OAuth authorization code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenters.TokenResReq'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/presenters.ErrorResponse'
      summary: Google OAuth callback
      tags:
      - OAuth
  /oauth/vk:
    get:
      consumes:
      - application/json
      description: Initiates VK OAuth login (not implemented)
      produces:
      - application/json
      responses: {}
      summary: VK OAuth login
      tags:
      - OAuth
  /oauth/vk/callback:
    get:
      consumes:
      - application/json
      description: Handles VK OAuth callback (not implemented)
      produces:
      - application/json
      responses: {}
      summary: VK OAuth callback
      tags:
      - OAuth
  /oauth/yandex:
    get:
      consumes:
      - application/json
      description: Initiates Yandex OAuth login (not implemented)
      produces:
      - application/json
      responses: {}
      summary: Yandex OAuth login
      tags:
      - OAuth
  /oauth/yandex/callback:
    get:
      consumes:
      - application/json
      description: Handles Yandex OAuth callback (not implemented)
      produces:
      - application/json
      responses: {}
      summary: Yandex OAuth callback
      tags:
      - OAuth
swagger: "2.0"
